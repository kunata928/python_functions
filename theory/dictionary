Словари в Python - неупорядоченные коллекции произвольных объектов с доступом по ключу.
Их иногда ещё называют ассоциативными массивами или хеш-таблицами.

Создание:
d = {}
d = defaultdict(int)
d = {'dict': 1, 'dictionary': 2}
d = dict(short='dict', long='dictionary')
d = dict([(1, 1), (2, 4)])           #{1: 1, 2: 4}
d = dict.fromkeys(['a', 'b'])        #{'a': None, 'b': None}
d = dict.fromkeys(['a', 'b'], 100)   #{'a': 100, 'b': 100}
d = {a: a ** 2 for a in range(7)}    #{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}

Методы словарей:
dict.clear() - очищает словарь.
dict.copy() - возвращает копию словаря.
classmethod dict.fromkeys(seq[, value]) - создает словарь с ключами из seq и значением value (по умолчанию None).
dict.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None).
dict.items() - возвращает пары (ключ, значение).
dict.keys() - возвращает ключи в словаре.
dict.pop(key[, default]) - удаляет ключ и возвращает значение.
                            Если ключа нет, возвращает default (по умолчанию бросает исключение).
dict.popitem() - удаляет и возвращает пару (ключ, значение).
                    Если словарь пуст, бросает исключение KeyError.
                    Помните, что словари неупорядочены.
dict.setdefault(key[, default]) - возвращает значение ключа,
                                но если его нет, не бросает исключение,
                                а создает ключ с значением default (по умолчанию None).
dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other.
                    Существующие ключи перезаписываются. Возвращает None (не новый словарь!).
dict.values() - возвращает значения в словаре.
dict.get(key) - возвращает значение по указанному ключу.
                Если указанного ключа не существует, метод вернёт None.

Итерация по словарю:
    for key in story_count: # итерация по каждому ключу в словаре.
       print(key)
    for key, value in dictionary.items():# получения пары «ключ — значение» на каждую итерацию.
        print(key, value)
    for ch in str:
        d[ch] += 1